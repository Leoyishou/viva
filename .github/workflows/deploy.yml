name: Deploy Viva Project

on:
  push:
    branches:
      - main          # 生产环境部署
  # pull_request:       # 添加 PR 触发器
  #   branches:
  #     - main

jobs:
  test:   # 自动化测试的内容（现在写了个必过的，以后再优化）
    runs-on: ubuntu-latest
    steps:
      - name: Always pass
        run: echo "Tests passed successfully!"
          
  deploy:
    needs: test       # 需要先跑自动化测试
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 增加超时时间
    environment: prod  # 指定使用 production 环境
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        uses: ndeloof/install-compose-action@v0.0.1

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Enable BuildKit  # BuildKit 是 Docker 的新一代构建引擎，提供了许多优化，能更快构建
        run: |
          # 启用 BuildKit
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV
          echo "COMPOSE_DOCKER_CLI_BUILD=1" >> $GITHUB_ENV

      - name: Build and push Docker images
        run: |
          docker-compose build
          docker-compose push

      - name: Copy docker-compose and config files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_B_HOST }}
          username: ${{ secrets.SERVER_B_USERNAME }}
          password: ${{ secrets.SERVER_B_PASSWORD }}
          source: "docker-compose.yml,ssl/,viva-frontend/nginx.conf"
          target: "/home/viva.liugongzi.org/viva"
          strip_components: 0

      # 1. 先检查工作目录内容
      - name: List workspace contents
        run: |
          echo "Workspace contents:"
          ls -la
          
      # 2. 复制文件到服务器
      - name: Copy project files
        uses: appleboy/scp-action@master  # scp-action代表能复制文件到服务器
        with:
          host: ${{ secrets.SERVER_B_HOST }}
          username: ${{ secrets.SERVER_B_USERNAME }}
          password: ${{ secrets.SERVER_B_PASSWORD }}
          source: "docker-compose.yml,viva-backend/,viva-frontend/"  # 包含所有需要的文件
          target: "/home/viva.liugongzi.org/viva"
          strip_components: 0

      # 3. SSH 部署
      - name: Deploy to Server B
        uses: appleboy/ssh-action@master   # ssh-action代表能上服务器做操作
        with:
          host: ${{ secrets.SERVER_B_HOST }}
          username: ${{ secrets.SERVER_B_USERNAME }}
          password: ${{ secrets.SERVER_B_PASSWORD }}
          script: |
            echo "Starting deployment..."
            cd /home/viva.liugongzi.org/viva
            
            # 设置目录权限
            echo "Setting directory permissions..."
            sudo chown -R $USER:$USER .
            sudo chmod -R 755 .
            
            # 确保日志目录存在并设置权限
            echo "Setting up log directory..."
            mkdir -p viva-backend/logs
            sudo chmod -R 777 viva-backend/logs
            
            # 创建并设置 .env 文件
            echo "Creating .env file..."
            
            # 使用 echo 直接写入文件
            echo "# 用户登录
GOOGLE_CLIENT_ID=${{ vars.GOOGLE_CLIENT_ID }}
JWT_ALGORITHM=${{ vars.JWT_ALGORITHM }}
JWT_SECRET=${{ vars.JWT_SECRET }}

# 阿里云OSS
OSS_ACCESS_KEY_ID=${{ vars.OSS_ACCESS_KEY_ID }}
OSS_ACCESS_KEY_SECRET=${{ vars.OSS_ACCESS_KEY_SECRET }}
OSS_BUCKET_NAME=${{ vars.OSS_BUCKET_NAME }}
OSS_ENDPOINT=${{ vars.OSS_ENDPOINT }}

# Elevenlabs
ELEVENLABS_API_KEY=${{ vars.ELEVENLABS_API_KEY }}
ELEVENLABS_MODEL=${{ vars.ELEVENLABS_MODEL }}

# PostgreSQL
DATABASE_URL=${{ vars.DATABASE_URL }}
DB_HOST=${{ vars.DB_HOST }}
DB_PORT=${{ vars.DB_PORT }}
DB_USER=${{ vars.DB_USER }}
DB_PASSWORD=${{ vars.DB_PASSWORD }}
DB_DBNAME=${{ vars.DB_DBNAME }}

# OpenAI
OPENAI_API_KEY=${{ vars.OPENAI_API_KEY }}
LLM_MODEL_NAME_FOR_BASIC_CHAT=${{ vars.LLM_MODEL_NAME_FOR_BASIC_CHAT }}

# 日志级别
LOG_LEVEL=${{ vars.LOG_LEVEL }}
LLM_MODEL_TYPE=${{ vars.LLM_MODEL_TYPE }}

# Prompt 文件路径
SEGMENT_PROMPT_FILE1=app/prompt/segment_prompt1.txt
SEGMENT_PROMPT_FILE2=app/prompt/segment_prompt2.txt
SEGMENT_PROMPT_FILE3=app/prompt/segment_prompt3.txt
SEGMENT_PROMPT_FILE4=app/prompt/segment_prompt4.txt
WORDNET_PROMPT_FILE1=app/prompt/wordnet_prompt1.txt" > viva-backend/.env

            # 验证文件是否正确创建
            echo "Verifying .env file..."
            ls -la viva-backend/.env
            
            # 设置 .env 文件权限
            chmod 600 viva-backend/.env
            
            # 确保 Docker 相关目录权限正确
            echo "Setting Docker directory permissions..."
            sudo chown -R $USER:docker .
            
            # 确保 SSL 目录权限正确（如果存在）
            if [ -d "ssl" ]; then
              echo "Setting SSL directory permissions..."
              sudo chmod -R 755 ssl
              sudo chown -R $USER:$USER ssl
            fi
            
            # 强制重新构建后端容器
            echo "Rebuilding backend container..."
            docker-compose build --no-cache backend
            
            # 停止旧容器
            echo "Stopping old containers..."
            docker-compose down
            
            # 启动新容器
            echo "Starting new containers..."
            docker-compose up -d
            
            # 等待容器启动
            echo "Waiting for containers to start..."
            sleep 10
            
            # 检查容器状态和权限
            echo "Checking container status and permissions..."
            docker ps -a
            docker-compose logs
            
            echo "Deployment completed"
